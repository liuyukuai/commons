package com.cutefool.commons.mybatis;

import com.cutefool.commons.core.BizException;
import com.cutefool.commons.core.page.ResponseCode;
import org.apache.ibatis.annotations.Param;

import java.util.List;

/**
 * mapper接口
 *
 * @author 271007729@qq.com
 * @date 2019-07-09 12:52
 */
@SuppressWarnings({"ALL", "UnusedReturnValue"})
public interface IBaseMapper<E, ID, Example> {
    /**
     * 通过 example统计总数
     *
     * @param example example
     * @return 总数
     */
    long countByExample(Example example);

    /**
     * 通过 example删除
     *
     * @param example example
     * @return 删除的数量
     */
    int deleteByExample(Example example);

    /**
     * 通过主键删除
     *
     * @param id id
     * @return 删除的数量
     */
    int deleteByPrimaryKey(ID id);

    /**
     * 插入一条记录
     *
     * @param e e
     * @return 要存储的数据
     */
    int insert(E e);

    /**
     * 插入一条记录
     *
     * @param e e
     * @return 要存储的数据
     */
    int insertSelective(E e);

    /**
     * 通过example查询一条数据
     *
     * @param example example
     * @return 查询的对象数据
     */
    E selectOneByExample(Example example);

    /**
     * 通过example查询数据
     *
     * @param example example
     * @return 查询的对象数据
     */
    List<E> selectByExample(Example example);

    /**
     * 通过主键查询数据
     *
     * @param id id
     * @return 查询的对象数据
     */
    default E selectByPrimaryKey(ID id) {
        throw new BizException(ResponseCode.SYSTEM_ERROR.getCode(), "please override this method");
    }

    ;

    /**
     * 更新数据
     *
     * @param e       实体数据
     * @param example example
     * @return 更新数据的总数
     */
    int updateByExampleSelective(@Param("record") E e, @Param("example") Example example);

    /**
     * 更新数据
     *
     * @param e       实体数据
     * @param example example
     * @return 更新的数据总数
     */
    int updateByExample(@Param("record") E e, @Param("example") Example example);

    /**
     * 更新数据
     *
     * @param e 实体数据
     * @return 更新的数据总数
     */
    default int updateByPrimaryKeySelective(E e) {
        throw new BizException(ResponseCode.SYSTEM_ERROR.getCode(), "please override this method");
    }

    /**
     * 通过主键更新数据
     *
     * @param e 实体数据
     * @return 更新的数据总数
     */
    default int updateByPrimaryKey(E e) {
        throw new BizException(ResponseCode.SYSTEM_ERROR.getCode(), "please override this method");
    }

    /**
     * 批量插入数据
     *
     * @param list 实体数据
     * @return 更新的数据总数
     */
    int batchInsert(@Param("list") List<E> list);

    /**
     * 插入一条记录
     *
     * @param e e
     * @return 要存储的数据
     */
    int replace(E e);

    /**
     * 插入一条记录
     *
     * @param e e
     * @return 要存储的数据
     */
    int replaceSelective(E e);

    /**
     * 批量插入数据
     *
     * @param list 实体数据
     * @return 更新的数据总数
     */
    int batchReplace(@Param("list") List<E> list);

    /**
     * 批量插入数据
     *
     * @param list 实体数据
     * @return 更新的数据总数
     */
    int batchReplaceSelective(@Param("list") List<E> list);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table base_t_poi_space
     *
     * @param example example
     * @return com.cutefool.base.business.space.domain.PoiSpace
     */
    E selectOneByExampleWithBLOBs(Example example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table base_t_poi_space
     *
     * @param example example
     * @return java.util.List
     */
    List<E> selectByExampleWithBLOBs(Example example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table base_t_poi_space
     *
     * @param record  record
     * @param example example
     * @return int
     * @mbg.generated Fri Jul 12 14:48:56 CST 2019
     */
    int updateByExampleWithBLOBs(@Param("record") E record, @Param("example") Example example);

    /**
     * @param record record
     * @return int
     * @mbg.generated Fri Jul 12 14:48:56 CST 2019
     */
    default int updateByPrimaryKeyWithBLOBs(E record) {
        throw new BizException(ResponseCode.SYSTEM_ERROR.getCode(), "please override this method");
    }
}
